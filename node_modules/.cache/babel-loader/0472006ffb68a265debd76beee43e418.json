{"ast":null,"code":"import _toConsumableArray from \"/home/matteo/code/bookit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/matteo/code/bookit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState } from \"react\";\nexport default (function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],\n      classList = _ref.classList;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      loadingButton = _useState2[0],\n      setLoadingButton = _useState2[1];\n\n  var setLoadingState = function setLoadingState(isLoading) {\n    var _loadingButton$classL, _loadingButton$classL2;\n\n    loadingButton.disabled = isLoading;\n    isLoading ? (_loadingButton$classL = loadingButton.classList).add.apply(_loadingButton$classL, _toConsumableArray(classList)) : (_loadingButton$classL2 = loadingButton.classList).remove.apply(_loadingButton$classL2, _toConsumableArray(classList));\n  };\n\n  return [setLoadingButton, setLoadingState];\n});","map":{"version":3,"sources":["/home/matteo/code/bookit/src/hooks/useLoading.js"],"names":["React","useState","classList","loadingButton","setLoadingButton","setLoadingState","isLoading","disabled","add","remove"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,gBAAe,YAAwB;AAAA,iFAAP,EAAO;AAAA,MAArBC,SAAqB,QAArBA,SAAqB;;AAAA,kBACKD,QAAQ,CAAC,IAAD,CADb;AAAA;AAAA,MAC9BE,aAD8B;AAAA,MACfC,gBADe;;AAErC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,SAAS,EAAI;AAAA;;AACnCH,IAAAA,aAAa,CAACI,QAAd,GAAyBD,SAAzB;AACAA,IAAAA,SAAS,GACL,yBAAAH,aAAa,CAACD,SAAd,EAAwBM,GAAxB,iDAA+BN,SAA/B,EADK,GAEL,0BAAAC,aAAa,CAACD,SAAd,EAAwBO,MAAxB,kDAAkCP,SAAlC,EAFJ;AAGD,GALD;;AAMA,SAAO,CAACE,gBAAD,EAAmBC,eAAnB,CAAP;AACD,CATD","sourcesContent":["import React, { useState } from \"react\";\n\nexport default ({ classList } = []) => {\n  const [loadingButton, setLoadingButton] = useState(null);\n  const setLoadingState = isLoading => {\n    loadingButton.disabled = isLoading;\n    isLoading\n      ? loadingButton.classList.add(...classList)\n      : loadingButton.classList.remove(...classList);\n  };\n  return [setLoadingButton, setLoadingState];\n};\n"]},"metadata":{},"sourceType":"module"}