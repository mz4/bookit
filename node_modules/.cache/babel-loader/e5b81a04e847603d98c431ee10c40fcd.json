{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar apollo_utilities_1 = require(\"apollo-utilities\");\n\nvar graphql_1 = require(\"./graphql\");\n\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n  if (execOptions === void 0) {\n    execOptions = {};\n  }\n\n  var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n  var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n  var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n  var resultMapper = execOptions.resultMapper;\n\n  var fragmentMatcher = execOptions.fragmentMatcher || function () {\n    return true;\n  };\n\n  var execContext = {\n    fragmentMap: fragmentMap,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    resultMapper: resultMapper,\n    resolver: resolver,\n    fragmentMatcher: fragmentMatcher\n  };\n  return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\n\nexports.graphql = graphql;\n\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var fragmentMap, contextValue, variables, result, execute;\n\n    var _this = this;\n\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n          result = {};\n\n          execute = function execute(selection) {\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n              var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n              return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                      return [2];\n                    }\n\n                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                    return [4, executeField(selection, rootValue, execContext)];\n\n                  case 1:\n                    fieldResult = _a.sent();\n                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n\n                    if (fieldResult !== undefined) {\n                      if (result[resultFieldKey] === undefined) {\n                        result[resultFieldKey] = fieldResult;\n                      } else {\n                        graphql_1.merge(result[resultFieldKey], fieldResult);\n                      }\n                    }\n\n                    return [2];\n\n                  case 2:\n                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                      fragment = selection;\n                    } else {\n                      fragment = fragmentMap[selection.name.value];\n\n                      if (!fragment) {\n                        throw new Error(\"No fragment named \" + selection.name.value);\n                      }\n                    }\n\n                    typeCondition = fragment.typeCondition.name.value;\n                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n\n                  case 3:\n                    fragmentResult = _a.sent();\n                    graphql_1.merge(result, fragmentResult);\n                    _a.label = 4;\n\n                  case 4:\n                    return [2];\n                }\n              });\n            });\n          };\n\n          return [4, Promise.all(selectionSet.selections.map(execute))];\n\n        case 1:\n          _a.sent();\n\n          if (execContext.resultMapper) {\n            return [2, execContext.resultMapper(result, rootValue)];\n          }\n\n          return [2, result];\n      }\n    });\n  });\n}\n\nfunction executeField(field, rootValue, execContext) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var variables, contextValue, resolver, fieldName, args, info, result;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n          fieldName = field.name.value;\n          args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n          info = {\n            isLeaf: !field.selectionSet,\n            resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n            directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n            field: field\n          };\n          return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n\n        case 1:\n          result = _a.sent();\n\n          if (!field.selectionSet) {\n            return [2, result];\n          }\n\n          if (result == null) {\n            return [2, result];\n          }\n\n          if (Array.isArray(result)) {\n            return [2, executeSubSelectedArray(field, result, execContext)];\n          }\n\n          return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n      }\n    });\n  });\n}\n\nfunction executeSubSelectedArray(field, result, execContext) {\n  return Promise.all(result.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n\n    if (Array.isArray(item)) {\n      return executeSubSelectedArray(field, item, execContext);\n    }\n\n    return executeSelectionSet(field.selectionSet, item, execContext);\n  }));\n}","map":null,"metadata":{},"sourceType":"script"}